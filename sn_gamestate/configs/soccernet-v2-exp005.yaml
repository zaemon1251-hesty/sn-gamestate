defaults:
  - dataset: soccernet_gs
  - eval: trackeval
  - engine: offline
  - state: save
  - visualization: gamestate
  - modules/bbox_detector: yolov8
  - modules/reid: prtreid
  - modules/track: bpbreid_strong_sort
  - modules/jersey_number_detect: mmocr
  - modules/team: kmeans_color # diff from v2-exp004
  - modules/team_side: mean_position_naive_bbox
  - modules/tracklet_agg: voting_role_jn
  - modules/pitch : skip
  - modules/calibration: skip
  - _self_

# Pipeline definition :
# - Defines the order in which the modules will be called
# - If loading a tracking state from disk, remove modules whose outputs are already provided in the loaded state
# Use 'pipeline: []' for an empty pipeline (e.g. when loading all tracking results from a saved .pklz tracker state)
pipeline:
  - bbox_detector
  - reid
  - track
  - pitch
  - calibration
  - jersey_number_detect
  - tracklet_agg # 各 track_id に 一番もっともらしい jersey number を、一連のビデオシーケンス共通で割り当てる
  - team # チームを reidで得られた embedding に基づいて clustering. 各 track_id について クラスターid 0, 1 が付与される
  - team_side # クラスターid に　右か左かの情報を付与する


# Experiment name
experiment_name: "sn-gamestate-v2"

# Path definitions
home_dir: "${oc.env:HOME}"
data_dir: "/local/moriy/SoccerNetGS"
model_dir: "/local/moriy/model/soccernet/sn-gamestate"

# Machine configuration
num_cores: 4
use_wandb: True
use_rich: True

# wandb kwargs
wandb:
  name: exp005

modules: # Allows module-specific batch_size and other configuration
  bbox_detector: {batch_size: 64}
  pose_bottomup: {batch_size: 64}
  reid: {batch_size: 256}
  track: {batch_size: 256}
  jersey_number_detect: {batch_size: 16}

# Flags
test_tracking: True
eval_tracking: False
print_config: True

# Dataset
dataset:
  nvid: -1  # For a quick first inference, only the first video is processed. Use "-1" to process all the videos.
  eval_set: "test"  # Tracking is performed on the SoccerNet validation set. Choose from {"train", "valid", "test", "challenge"}.
  dataset_path: ${data_dir}/additional-information-720p-25fps  # The SoccerNet game state dataset is located under the data path (defined above) in the 'SoccerNetGS' folder
  vids_dict: # Use one key per split (valid, test, etc)
    valid: []  # Specify explicitly which video to apply tracking on, e.g. ['SNGS-04', 'SNGS-51'] . Ignored when left empty.

# Tracker state (save computation time by dumping tracking results on disk for later re-use)
state:
  save_file: "states/${experiment_name}.pklz"  # 'null' to disable saving. This is the save path for the tracker_state object that contains all modules outputs (bboxes, reid embeddings, jersey numbers, roles, teams, etc)
  load_file: null  # 'null' to disable loading. Load a file that was saved with the 'state.save_file' option above. Don't forget to remove from the pipeline all modules that should not be run again, but loaded from the saved tracker state.

# Visualization
visualization:
  cfg:
    save_videos: True  # Save a .mp4 video on disk with the game state reconstruction output (see 'tracklab/tracklab/configs/visualization' for more options)

# configure Hydra to use the current working directory
# and set up the output directory according to experiment_name
project_dir: "${hydra:runtime.cwd}"
hydra:
  output_subdir: "configs"
  job:
    chdir: True
  run:
    dir: "outputs/${experiment_name}/${now:%Y-%m-%d}/${now:%H-%M-%S}"
  sweep:
    dir: "multirun_outputs/${experiment_name}/${now:%Y-%m-%d}/${now:%H-%M-%S}"
